generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String
  name             String
  phone            String?
  role             String    @default("user")
  isActive         Boolean   @default(true)
  isEmailVerified  Boolean   @default(false)
  emailVerifyToken String?
  resetPasswordToken String?
  lastLoginAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  posts     Post[]
  sessions  Session[]
  comments  Comment[]
  likes     Like[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        String   @id @default(uuid())
  title     String
  slug      String   @unique
  excerpt   String
  content   String
  image     String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  postId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id])
  likes     Like[]
}

model Like {
  id        String   @id @default(uuid())
  postId    String?
  commentId String?
  userId    String
  createdAt DateTime @default(now())

  // Relations
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BannedUser {
  id       String   @id @default(uuid())
  email    String   @unique
  phone    String?
  reason   String
  bannedAt DateTime @default(now())
}